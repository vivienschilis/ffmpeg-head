#!/bin/sh
#
# Small utility to fetch and unpack archives on the web (with cache)
#
# Depends on : curl, tar, git
#

set -e

# ENV vars, inherited from external
CACHE=${CACHE:-1}
UNPACK=${UNPACK:-1}
VERBOSE=${VERBOSE:-0}

TARGET_DIR=${TARGET_DIR:-`pwd`}
if [ -n "$XDG_CACHE_HOME" ]; then
  CACHE_DIR="${XDG_CACHE_HOME}/fetchurl"
elif [ -n "$HOME" ]; then
  CACHE_DIR="${CACHE_DIR:-$HOME/.cache/fetchurl}"
else
  CACHE_DIR="${CACHE_DIR:-}"
fi
TMP_DIR="${TMP_DIR:-/tmp}"

URL=$1
GIT_COMMIT=$2

set -u

stderr () {
  echo $@ 1>&2
}

sh () {
  echo $ $@
  if [ "$VERBOSE" -ne 0 ]; then
    $@
  else
    $@ >/dev/null 2>&1
  fi
}

usage() {
  echo "Usage: fetch_url url [git-commit]"
  echo "CACHE=${CACHE}"
  echo "UNPACK=${UNPACK}"
  echo "VERBOSE=${VERBOSE}"

  echo "TARGET_DIR=${TARGET_DIR}"
  echo "CACHE_DIR=${CACHE_DIR}"

  echo "URL=${URL}"
  exit 1
}

fetch_from_http() {
  sh curl -L -o "$1" "$2"
}

fetch_from_git() {
  sh git clone "$2" "$1"
}

fetch_from_svn() {
  sh svn checkout "$2" "$1"
}

extract_scheme() {
  extname=`echo "$1" | awk -F . '{print $NF}'`
  if [ "$extname" = "git" ]; then
    echo "git"
  else
    echo "$1" | awk '{split($0,a,"://"); print a[1]}'
  fi
}

if [ -z "$URL" ]; then
  stderr "ERROR: missing url"
  usage
fi

if [ -z "$CACHE_DIR" ] && [ "$CACHE" -ne 0 ]; then
  stderr "ERROR: missing cache dir"
  usage
fi

scheme=`extract_scheme "$URL"`
filename=`basename "$URL" | sed 's/\?.*//'`
case $scheme in
  git)
      extname=`echo "$filename" | awk -F . '{print $NF}'`
      filename="${filename%.$extname}"
      tmp_file="$CACHE_DIR/$filename.tmp"
      cache_file="$CACHE_DIR/$filename"
  ;;
  *)
      tmp_file="$CACHE_DIR/$filename.tmp"
      cache_file="$CACHE_DIR/$filename"
  ;;
esac

mkdir -p "$CACHE_DIR"

# Fetch
if [ "$CACHE" -eq 0 ] || [ ! -e "$cache_file" ]; then
  rm -rf "$tmp_file"
  case $scheme in
  git)
    fetch_from_git "$tmp_file" "$URL";;
  svn)
    fetch_from_svn "$tmp_file" "$URL";;
  *)
    fetch_from_http "$tmp_file" "$URL";;
  esac

  sh mv -f "$tmp_file" "$cache_file"
elif [ "$scheme" = "git" ]; then
  sh cd $cache_file
  sh git fetch
fi

# TODO: checksums

# Unpack
if [ "$UNPACK" -ne 0 ]; then

  if [ -d "$cache_file/.git" ]; then
    unpack=git
  elif [ "$filename" != "${filename%.tar.gz}" ] || [ "$filename" != "${filename%.tgz}" ]; then
    unpack=.tar.gz
  elif [ "$filename" != "${filename%.tar.bz2}" ]; then
    unpack=.tar.bz2
  else
    stderr "extension of $filename is not supported"
    exit 1
  fi

  sh cd "$TARGET_DIR"

  case "$unpack" in
    .tar.gz)
      sh tar xzvf "$cache_file"
    ;;
    .tar.bz2)
      sh tar xjvf "$cache_file"
    ;;
    git)
      sh cp -rf "$cache_file" .
      if [ -n "$GIT_COMMIT" ]; then
        sh pushd $filename
        sh git checkout $GIT_COMMIT
        sh popd
      fi
    ;;
    *)
      stderr "BUG, this should not happen"
      exit 1
    ;;
  esac
fi
